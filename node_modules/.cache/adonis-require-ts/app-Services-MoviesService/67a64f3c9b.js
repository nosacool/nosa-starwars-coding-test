"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Movie_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Movie"));
const BaseService_1 = __importDefault(require("./BaseService"));
class MoviesService extends BaseService_1.default {
    constructor() {
        super(Movie_1.default);
    }
    async insertData(data) {
        try {
            data.forEach(async (movie) => {
                const movies = new this.model();
                movies.title = movie.title;
                movies.episode_id = movie.episode_id;
                movies.opening_crawl = movie.opening_crawl;
                movies.director = movie.director;
                movies.producer = movie.producer;
                movies.release_date = movie.release_date;
                movies.comment_count = 0;
                await movies.save();
                return true;
            });
        }
        catch (error) {
            return false;
        }
    }
    async fetchMovies() {
        const movies = await Movie_1.default.query().orderBy('release_date', 'asc').withCount('comments', (query) => {
            query.as('totalComments');
        });
        movies.forEach((movie) => {
            movie.comment_count = movie.$extras.totalComments;
            movie.save();
        });
        return movies;
    }
    async fetchMovieComments(id) {
        const movie = await this.model.find(id);
        if (movie) {
            await movie.preload('comments').orderBy('id', 'DESC');
            return movie.comments;
        }
    }
}
exports.default = MoviesService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW92aWVzU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIk1vdmllc1NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtRkFBcUM7QUFHckMsZ0VBQXdDO0FBRXhDLE1BQXFCLGFBQWMsU0FBUSxxQkFBVztJQUVwRDtRQUNFLEtBQUssQ0FBQyxlQUFLLENBQUMsQ0FBQTtJQUNkLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLElBQWdCO1FBQy9CLElBQUk7WUFDRixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsRUFBRTtnQkFDekIsTUFBTSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7Z0JBQy9CLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQTtnQkFDMUIsTUFBTSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFBO2dCQUNwQyxNQUFNLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUE7Z0JBQzFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQTtnQkFDaEMsTUFBTSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFBO2dCQUNoQyxNQUFNLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUE7Z0JBQ3hDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFBO2dCQUN4QixNQUFNLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtnQkFDbkIsT0FBTyxJQUFJLENBQUE7WUFDYixDQUFDLENBQUMsQ0FBQztTQUNKO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLEtBQUssQ0FBQTtTQUNiO0lBR0gsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXO1FBQ2YsTUFBTSxNQUFNLEdBQUksTUFBTSxlQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDL0YsS0FBSyxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQTtRQUMzQixDQUFDLENBQUMsQ0FBQTtRQUNGLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUN2QixLQUFLLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFBO1lBQ2pELEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNkLENBQUMsQ0FBQyxDQUFBO1FBRUYsT0FBTyxNQUFNLENBQUE7SUFFZixDQUFDO0lBRUQsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEVBQVM7UUFFaEMsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUV2QyxJQUFHLEtBQUssRUFBQztZQUNQLE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFDLE1BQU0sQ0FBQyxDQUFBO1lBRXBELE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQTtTQUN0QjtJQUNILENBQUM7Q0FFRjtBQW5ERCxnQ0FtREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTW92aWUgZnJvbSBcIkFwcC9Nb2RlbHMvTW92aWVcIjtcbmltcG9ydCBNb3ZpZXNJbnRlcmZhY2UgZnJvbSBcIkNvbnRyYWN0cy9pbnRlcmZhY2VzL01vdmllcy5JbnRlcmZhY2VcIjtcbmltcG9ydCB7IFBvc2l0aW9uIH0gZnJvbSBcIm1vbmFjby1lZGl0b3JcIjtcbmltcG9ydCBCYXNlU2VydmljZSBmcm9tIFwiLi9CYXNlU2VydmljZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb3ZpZXNTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2UgaW1wbGVtZW50cyBNb3ZpZXNJbnRlcmZhY2V7XG5cbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcihNb3ZpZSlcbiAgfVxuXG4gIGFzeW5jIGluc2VydERhdGEoZGF0YTogQXJyYXk8YW55Pikge1xuICAgIHRyeSB7XG4gICAgICBkYXRhLmZvckVhY2goYXN5bmMgbW92aWUgPT4ge1xuICAgICAgICBjb25zdCBtb3ZpZXMgPSBuZXcgdGhpcy5tb2RlbCgpXG4gICAgICAgIG1vdmllcy50aXRsZSA9IG1vdmllLnRpdGxlXG4gICAgICAgIG1vdmllcy5lcGlzb2RlX2lkID0gbW92aWUuZXBpc29kZV9pZFxuICAgICAgICBtb3ZpZXMub3BlbmluZ19jcmF3bCA9IG1vdmllLm9wZW5pbmdfY3Jhd2xcbiAgICAgICAgbW92aWVzLmRpcmVjdG9yID0gbW92aWUuZGlyZWN0b3JcbiAgICAgICAgbW92aWVzLnByb2R1Y2VyID0gbW92aWUucHJvZHVjZXJcbiAgICAgICAgbW92aWVzLnJlbGVhc2VfZGF0ZSA9IG1vdmllLnJlbGVhc2VfZGF0ZVxuICAgICAgICBtb3ZpZXMuY29tbWVudF9jb3VudCA9IDBcbiAgICAgICAgYXdhaXQgbW92aWVzLnNhdmUoKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuXG4gIH1cblxuICBhc3luYyBmZXRjaE1vdmllcygpe1xuICAgIGNvbnN0IG1vdmllcyA9ICBhd2FpdCBNb3ZpZS5xdWVyeSgpLm9yZGVyQnkoJ3JlbGVhc2VfZGF0ZScsJ2FzYycpLndpdGhDb3VudCgnY29tbWVudHMnLChxdWVyeSkgPT4ge1xuICAgICAgcXVlcnkuYXMoJ3RvdGFsQ29tbWVudHMnKVxuICAgIH0pXG4gICAgbW92aWVzLmZvckVhY2goKG1vdmllKSA9PiB7XG4gICAgICBtb3ZpZS5jb21tZW50X2NvdW50ID0gbW92aWUuJGV4dHJhcy50b3RhbENvbW1lbnRzXG4gICAgICBtb3ZpZS5zYXZlKClcbiAgICB9KVxuXG4gICAgcmV0dXJuIG1vdmllc1xuICAgIC8vcmV0dXJuICB0aGlzLm1vZGVsLnF1ZXJ5KCkud2l0aENvdW50KCdjb21tZW50cycpXG4gIH1cblxuICBhc3luYyBmZXRjaE1vdmllQ29tbWVudHMoaWQ6bnVtYmVyKXtcbiAgIC8vIGNvbnNvbGUubG9nKGlkKTtcbiAgICBjb25zdCBtb3ZpZSA9IGF3YWl0IHRoaXMubW9kZWwuZmluZChpZClcblxuICAgIGlmKG1vdmllKXtcbiAgICAgIGF3YWl0IG1vdmllLnByZWxvYWQoJ2NvbW1lbnRzJykub3JkZXJCeSgnaWQnLCdERVNDJylcbiAgICAgIC8vY29uc29sZS5sb2cobW92aWUpXG4gICAgICByZXR1cm4gbW92aWUuY29tbWVudHNcbiAgICB9XG4gIH1cblxufVxuIl19