"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Movie_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Movie"));
const BaseService_1 = __importDefault(require("./BaseService"));
class MoviesService extends BaseService_1.default {
    constructor() {
        super(Movie_1.default);
    }
    async insertData(data) {
        try {
            data.forEach(async (movie) => {
                const movies = new this.model();
                movies.title = movie.title;
                movies.episode_id = movie.episode_id;
                movies.opening_crawl = movie.opening_crawl;
                movies.director = movie.director;
                movies.producer = movie.producer;
                movies.release_date = movie.release_date;
                movies.comment_count = 0;
                await movies.save();
                return true;
            });
        }
        catch (error) {
            return false;
        }
    }
    async fetchMovies() {
        const movies = await Movie_1.default.query().orderBy('release_date', 'asc').withCount('comments', (query) => {
            query.as('totalComments');
        });
        movies.forEach((movie) => {
            movie.comment_count = movie.$extras.totalComments;
            movie.save();
        });
        return movies;
    }
    async fetchMovieComments(id) {
        const movie = await this.model.find(id);
        if (movie) {
            await movie.preload('comments').orderBy('id', 'DESC');
            return movie.comments;
        }
    }
}
exports.default = MoviesService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW92aWVzU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIk1vdmllc1NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtRkFBcUM7QUFHckMsZ0VBQXdDO0FBRXhDLE1BQXFCLGFBQWMsU0FBUSxxQkFBVztJQUVwRDtRQUNFLEtBQUssQ0FBQyxlQUFLLENBQUMsQ0FBQTtJQUNkLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLElBQWdCO1FBQy9CLElBQUk7WUFDRixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsRUFBRTtnQkFDekIsTUFBTSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7Z0JBQy9CLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQTtnQkFDMUIsTUFBTSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFBO2dCQUNwQyxNQUFNLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUE7Z0JBQzFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQTtnQkFDaEMsTUFBTSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFBO2dCQUNoQyxNQUFNLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUE7Z0JBQ3hDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFBO2dCQUN4QixNQUFNLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtnQkFDbkIsT0FBTyxJQUFJLENBQUE7WUFDYixDQUFDLENBQUMsQ0FBQztTQUNKO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLEtBQUssQ0FBQTtTQUNiO0lBR0gsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXO1FBQ2YsTUFBTSxNQUFNLEdBQUksTUFBTSxlQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDL0YsS0FBSyxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQTtRQUMzQixDQUFDLENBQUMsQ0FBQTtRQUNGLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUN2QixLQUFLLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFBO1lBQ2pELEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNkLENBQUMsQ0FBQyxDQUFBO1FBRUYsT0FBTyxNQUFNLENBQUE7SUFFZixDQUFDO0lBRUQsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEVBQVM7UUFFaEMsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUV2QyxJQUFHLEtBQUssRUFBQztZQUNQLE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFDLE1BQU0sQ0FBQyxDQUFBO1lBRXBELE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQTtTQUN0QjtJQUNILENBQUM7Q0FFRjtBQW5ERCxnQ0FtREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTW92aWUgZnJvbSBcIkFwcC9Nb2RlbHMvTW92aWVcIjtcbmltcG9ydCBNb3ZpZXNJbnRlcmZhY2UgZnJvbSBcIkNvbnRyYWN0cy9pbnRlcmZhY2VzL01vdmllcy5JbnRlcmZhY2VcIjtcbi8vaW1wb3J0IHsgUG9zaXRpb24gfSBmcm9tIFwibW9uYWNvLWVkaXRvclwiO1xuaW1wb3J0IEJhc2VTZXJ2aWNlIGZyb20gXCIuL0Jhc2VTZXJ2aWNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vdmllc1NlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZSBpbXBsZW1lbnRzIE1vdmllc0ludGVyZmFjZXtcblxuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKE1vdmllKVxuICB9XG5cbiAgYXN5bmMgaW5zZXJ0RGF0YShkYXRhOiBBcnJheTxhbnk+KSB7XG4gICAgdHJ5IHtcbiAgICAgIGRhdGEuZm9yRWFjaChhc3luYyBtb3ZpZSA9PiB7XG4gICAgICAgIGNvbnN0IG1vdmllcyA9IG5ldyB0aGlzLm1vZGVsKClcbiAgICAgICAgbW92aWVzLnRpdGxlID0gbW92aWUudGl0bGVcbiAgICAgICAgbW92aWVzLmVwaXNvZGVfaWQgPSBtb3ZpZS5lcGlzb2RlX2lkXG4gICAgICAgIG1vdmllcy5vcGVuaW5nX2NyYXdsID0gbW92aWUub3BlbmluZ19jcmF3bFxuICAgICAgICBtb3ZpZXMuZGlyZWN0b3IgPSBtb3ZpZS5kaXJlY3RvclxuICAgICAgICBtb3ZpZXMucHJvZHVjZXIgPSBtb3ZpZS5wcm9kdWNlclxuICAgICAgICBtb3ZpZXMucmVsZWFzZV9kYXRlID0gbW92aWUucmVsZWFzZV9kYXRlXG4gICAgICAgIG1vdmllcy5jb21tZW50X2NvdW50ID0gMFxuICAgICAgICBhd2FpdCBtb3ZpZXMuc2F2ZSgpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG5cbiAgfVxuXG4gIGFzeW5jIGZldGNoTW92aWVzKCl7XG4gICAgY29uc3QgbW92aWVzID0gIGF3YWl0IE1vdmllLnF1ZXJ5KCkub3JkZXJCeSgncmVsZWFzZV9kYXRlJywnYXNjJykud2l0aENvdW50KCdjb21tZW50cycsKHF1ZXJ5KSA9PiB7XG4gICAgICBxdWVyeS5hcygndG90YWxDb21tZW50cycpXG4gICAgfSlcbiAgICBtb3ZpZXMuZm9yRWFjaCgobW92aWUpID0+IHtcbiAgICAgIG1vdmllLmNvbW1lbnRfY291bnQgPSBtb3ZpZS4kZXh0cmFzLnRvdGFsQ29tbWVudHNcbiAgICAgIG1vdmllLnNhdmUoKVxuICAgIH0pXG5cbiAgICByZXR1cm4gbW92aWVzXG4gICAgLy9yZXR1cm4gIHRoaXMubW9kZWwucXVlcnkoKS53aXRoQ291bnQoJ2NvbW1lbnRzJylcbiAgfVxuXG4gIGFzeW5jIGZldGNoTW92aWVDb21tZW50cyhpZDpudW1iZXIpe1xuICAgLy8gY29uc29sZS5sb2coaWQpO1xuICAgIGNvbnN0IG1vdmllID0gYXdhaXQgdGhpcy5tb2RlbC5maW5kKGlkKVxuXG4gICAgaWYobW92aWUpe1xuICAgICAgYXdhaXQgbW92aWUucHJlbG9hZCgnY29tbWVudHMnKS5vcmRlckJ5KCdpZCcsJ0RFU0MnKVxuICAgICAgLy9jb25zb2xlLmxvZyhtb3ZpZSlcbiAgICAgIHJldHVybiBtb3ZpZS5jb21tZW50c1xuICAgIH1cbiAgfVxuXG59XG4iXX0=