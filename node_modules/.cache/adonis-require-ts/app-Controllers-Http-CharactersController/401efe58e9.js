"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const CharacterService_1 = __importDefault(global[Symbol.for('ioc.use')]("MyProject/CharacterService"));
const BaseController_1 = __importDefault(require("./BaseController"));
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const Helpers_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Helpers/Helpers"));
class CharactersController extends BaseController_1.default {
    async fetchData() {
        if (await CharacterService_1.default.fetchdata()) {
            return 'done';
        }
        else {
            return 'error';
        }
    }
    async getCharacters({ request }) {
        const characterSchema = Validator_1.schema.create({
            sort: Validator_1.schema.string.optional({ trim: true, escape: true }, [
                Validator_1.rules.regex(new RegExp('^(gender|name|height)$'))
            ]),
            order: Validator_1.schema.string.optional({ trim: true, escape: true }, [
                Validator_1.rules.regex(new RegExp('^(asc|ASC|desc|DESC)$')),
                Validator_1.rules.requiredIfExists('sort')
            ]),
            filter: Validator_1.schema.string.optional({ trim: true, escape: true })
        });
        const payload = await request.validate({ schema: characterSchema, messages: {
                'sort.regex': 'Please use gender, name or height for the sort parameter',
                'order.regex': 'Please use ASC or DESC for the order parameter'
            } });
        const data = await CharacterService_1.default.fetchCharacters(payload.sort, payload.order, payload.filter);
        const result = {
            metadata: {
                count: data.length,
                Height: await this.totalHeight(data),
            },
            characters: data
        };
        return this.sendResponse(Helpers_1.default.successMessage(), result);
    }
    async totalHeight(characters) {
        var total = 0;
        characters.forEach(async (character) => {
            if (!isNaN(character.height)) {
                total += Number(character.height);
            }
        });
        return {
            cm: total,
            feet: await this.toFeet(total)
        };
    }
    async toFeet(n) {
        var realFeet = ((n * 0.393700) / 12);
        var feet = Math.floor(realFeet);
        var inches = ((realFeet - feet) * 12).toFixed(2);
        return feet + "ft" + ' ' + inches + 'inches';
    }
}
exports.default = CharactersController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhcmFjdGVyc0NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDaGFyYWN0ZXJzQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLHdHQUFnRTtBQUNoRSxzRUFBOEM7QUFDOUMsMkVBQW9FO0FBQ3BFLHdGQUEwQztBQUUxQyxNQUFxQixvQkFBcUIsU0FBUSx3QkFBYztJQUV2RCxLQUFLLENBQUMsU0FBUztRQUNwQixJQUFHLE1BQU0sMEJBQWlCLENBQUMsU0FBUyxFQUFFLEVBQUM7WUFDckMsT0FBTyxNQUFNLENBQUE7U0FDZDthQUNHO1lBQ0YsT0FBTyxPQUFPLENBQUE7U0FDZjtJQUNILENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUMsT0FBTyxFQUFzQjtRQUd2RCxNQUFNLGVBQWUsR0FBRyxrQkFBTSxDQUFDLE1BQU0sQ0FBQztZQUNwQyxJQUFJLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQyxNQUFNLEVBQUMsSUFBSSxFQUFDLEVBQUM7Z0JBQ3JELGlCQUFLLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUM7YUFDbEQsQ0FBQztZQUNGLEtBQUssRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBQyxJQUFJLEVBQUMsRUFBQztnQkFDdEQsaUJBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztnQkFDaEQsaUJBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUM7YUFDL0IsQ0FBQztZQUNGLE1BQU0sRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBQyxJQUFJLEVBQUMsQ0FBQztTQUUxRCxDQUFDLENBQUE7UUFHRixNQUFNLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBQyxNQUFNLEVBQUUsZUFBZSxFQUFDLFFBQVEsRUFBQztnQkFDdkUsWUFBWSxFQUFFLDBEQUEwRDtnQkFDeEUsYUFBYSxFQUFFLGdEQUFnRDthQUNoRSxFQUFDLENBQUMsQ0FBQztRQUdKLE1BQU0sSUFBSSxHQUFHLE1BQU0sMEJBQWlCLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUMsT0FBTyxDQUFDLEtBQUssRUFBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDL0YsTUFBTSxNQUFNLEdBQUk7WUFDZCxRQUFRLEVBQUM7Z0JBQ1AsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNO2dCQUNsQixNQUFNLEVBQUMsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQzthQUNwQztZQUNELFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUE7UUFDRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQU8sQ0FBQyxjQUFjLEVBQUUsRUFBQyxNQUFNLENBQUMsQ0FBQTtJQUUzRCxDQUFDO0lBRUQsS0FBSyxDQUFDLFdBQVcsQ0FBRSxVQUFVO1FBQzNCLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQTtRQUNiLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFDLFNBQVMsRUFBQyxFQUFFO1lBRXBDLElBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFDO2dCQUN6QixLQUFLLElBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTthQUNqQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTztZQUNMLEVBQUUsRUFBRSxLQUFLO1lBQ1QsSUFBSSxFQUFFLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDL0IsQ0FBQTtJQUNILENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDWixJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakQsT0FBTyxJQUFJLEdBQUcsSUFBSSxHQUFFLEdBQUcsR0FBRSxNQUFNLEdBQUcsUUFBUSxDQUFDO0lBQzdDLENBQUM7Q0FJRjtBQXBFRCx1Q0FvRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcbmltcG9ydCBDaGFyYWN0ZXJTZXJ2aWNlcyBmcm9tICdAaW9jOk15UHJvamVjdC9DaGFyYWN0ZXJTZXJ2aWNlJztcbmltcG9ydCBCYXNlQ29udHJvbGxlciBmcm9tIFwiLi9CYXNlQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgc2NoZW1hLCBydWxlcyx2YWxpZGF0b3IgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL1ZhbGlkYXRvcidcbmltcG9ydCBIZWxwZXJzIGZyb20gJ0FwcC9IZWxwZXJzL0hlbHBlcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFyYWN0ZXJzQ29udHJvbGxlciBleHRlbmRzIEJhc2VDb250cm9sbGVyIHtcblxuICBwdWJsaWMgYXN5bmMgZmV0Y2hEYXRhKCl7XG4gICAgaWYoYXdhaXQgQ2hhcmFjdGVyU2VydmljZXMuZmV0Y2hkYXRhKCkpe1xuICAgICAgcmV0dXJuICdkb25lJ1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgcmV0dXJuICdlcnJvcidcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0Q2hhcmFjdGVycyh7cmVxdWVzdH06IEh0dHBDb250ZXh0Q29udHJhY3Qpe1xuXG5cbiAgICBjb25zdCBjaGFyYWN0ZXJTY2hlbWEgPSBzY2hlbWEuY3JlYXRlKHtcbiAgICAgIHNvcnQ6IHNjaGVtYS5zdHJpbmcub3B0aW9uYWwoeyB0cmltOiB0cnVlLGVzY2FwZTp0cnVlfSxbXG4gICAgICAgIHJ1bGVzLnJlZ2V4KG5ldyBSZWdFeHAoJ14oZ2VuZGVyfG5hbWV8aGVpZ2h0KSQnKSlcbiAgICAgIF0pLFxuICAgICAgb3JkZXI6IHNjaGVtYS5zdHJpbmcub3B0aW9uYWwoe3RyaW06IHRydWUsIGVzY2FwZTp0cnVlfSxbXG4gICAgICAgIHJ1bGVzLnJlZ2V4KG5ldyBSZWdFeHAoJ14oYXNjfEFTQ3xkZXNjfERFU0MpJCcpKSxcbiAgICAgICAgcnVsZXMucmVxdWlyZWRJZkV4aXN0cygnc29ydCcpXG4gICAgICBdKSxcbiAgICAgIGZpbHRlcjogc2NoZW1hLnN0cmluZy5vcHRpb25hbCh7dHJpbTogdHJ1ZSwgZXNjYXBlOnRydWV9KVxuXG4gICAgfSlcblxuXG4gICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IHJlcXVlc3QudmFsaWRhdGUoe3NjaGVtYTogY2hhcmFjdGVyU2NoZW1hLG1lc3NhZ2VzOntcbiAgICAgICdzb3J0LnJlZ2V4JzogJ1BsZWFzZSB1c2UgZ2VuZGVyLCBuYW1lIG9yIGhlaWdodCBmb3IgdGhlIHNvcnQgcGFyYW1ldGVyJyxcbiAgICAgICdvcmRlci5yZWdleCc6ICdQbGVhc2UgdXNlIEFTQyBvciBERVNDIGZvciB0aGUgb3JkZXIgcGFyYW1ldGVyJ1xuICAgIH19KTtcblxuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IENoYXJhY3RlclNlcnZpY2VzLmZldGNoQ2hhcmFjdGVycyhwYXlsb2FkLnNvcnQscGF5bG9hZC5vcmRlcixwYXlsb2FkLmZpbHRlcilcbiAgICBjb25zdCByZXN1bHQgPSAge1xuICAgICAgbWV0YWRhdGE6e1xuICAgICAgICBjb3VudDogZGF0YS5sZW5ndGgsXG4gICAgICAgIEhlaWdodDphd2FpdCB0aGlzLnRvdGFsSGVpZ2h0KGRhdGEpLFxuICAgICAgfSxcbiAgICAgIGNoYXJhY3RlcnM6IGRhdGFcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2VuZFJlc3BvbnNlKEhlbHBlcnMuc3VjY2Vzc01lc3NhZ2UoKSxyZXN1bHQpXG5cbiAgfVxuXG4gIGFzeW5jIHRvdGFsSGVpZ2h0IChjaGFyYWN0ZXJzKSB7XG4gICAgdmFyIHRvdGFsID0gMFxuICAgIGNoYXJhY3RlcnMuZm9yRWFjaChhc3luYyBjaGFyYWN0ZXIgPT4ge1xuICAgICAgLy9jb25zb2xlLmxvZyhjaGFyYWN0ZXIpXG4gICAgIGlmKCFpc05hTihjaGFyYWN0ZXIuaGVpZ2h0KSl7XG4gICAgICAgIHRvdGFsKz0gTnVtYmVyKGNoYXJhY3Rlci5oZWlnaHQpXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNtOiB0b3RhbCxcbiAgICAgIGZlZXQ6IGF3YWl0IHRoaXMudG9GZWV0KHRvdGFsKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHRvRmVldChuKSB7XG4gICAgdmFyIHJlYWxGZWV0ID0gKChuKjAuMzkzNzAwKSAvIDEyKTtcbiAgICB2YXIgZmVldCA9IE1hdGguZmxvb3IocmVhbEZlZXQpO1xuICAgIHZhciBpbmNoZXMgPSAoKHJlYWxGZWV0IC0gZmVldCkgKiAxMikudG9GaXhlZCgyKTtcbiAgICByZXR1cm4gZmVldCArIFwiZnRcIiArJyAnKyBpbmNoZXMgKyAnaW5jaGVzJztcbiAgfVxuXG5cblxufVxuIl19