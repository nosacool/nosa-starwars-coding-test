"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Character_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Character"));
const BaseService_1 = __importDefault(require("./BaseService"));
const axios_1 = __importDefault(require("axios"));
class CharacterService extends BaseService_1.default {
    constructor() {
        super(Character_1.default);
    }
    async fetchCharacters(sortType, order, filter) {
        try {
            (await Character_1.default.query());
            if ((filter != undefined) && (sortType != undefined)) {
                const result = await this.model.query().where('gender', filter).orderBy(sortType, order);
                return result;
            }
            else if ((sortType != undefined) && (filter == undefined)) {
                const result = this.model.query().orderBy(sortType, order);
                return result;
            }
            else if ((sortType == undefined) && (filter != undefined)) {
                const result = this.model.query().where('gender', filter);
                return result;
            }
            else {
                const result = this.model.query();
                return result;
            }
        }
        catch (error) {
            console.log(error);
            return sortType + ' is not a valid sort Type';
        }
    }
    async fetchdata() {
        try {
            for (var i = 1; i <= 9; i++) {
                const result = (await axios_1.default.get('https://swapi.dev/api/people/?page=' + i)).data;
                result.results.forEach(async (character) => {
                    delete character.created;
                    delete character.edited;
                    const people = await Character_1.default.create(character);
                });
            }
            return true;
        }
        catch (error) {
            return false;
        }
    }
}
exports.default = CharacterService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhcmFjdGVyU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNoYXJhY3RlclNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSwyRkFBNkM7QUFFN0MsZ0VBQXdDO0FBQ3hDLGtEQUEwQjtBQUcxQixNQUFxQixnQkFBaUIsU0FBUSxxQkFBVztJQUV2RDtRQUNFLEtBQUssQ0FBQyxtQkFBUyxDQUFDLENBQUE7SUFFbEIsQ0FBQztJQUVELEtBQUssQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFDLEtBQUssRUFBQyxNQUFNO1FBSXpDLElBQUk7WUFDRixDQUFDLE1BQU0sbUJBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO1lBQ3pCLElBQUcsQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDLElBQUUsQ0FBQyxRQUFRLElBQUksU0FBUyxDQUFDLEVBQUM7Z0JBRWhELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUMsS0FBSyxDQUFDLENBQUE7Z0JBRXRGLE9BQU8sTUFBTSxDQUFBO2FBQ2Q7aUJBQ0ksSUFBRyxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUMsSUFBRSxDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUMsRUFBQztnQkFDckQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFDLEtBQUssQ0FBQyxDQUFBO2dCQUV6RCxPQUFPLE1BQU0sQ0FBQTthQUVkO2lCQUNJLElBQUcsQ0FBQyxRQUFRLElBQUksU0FBUyxDQUFDLElBQUUsQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDLEVBQUM7Z0JBQ3JELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBQyxNQUFNLENBQUMsQ0FBQTtnQkFFeEQsT0FBTyxNQUFNLENBQUE7YUFFZDtpQkFDRztnQkFDRixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFBO2dCQUVqQyxPQUFPLE1BQU0sQ0FBQTthQUNkO1NBR0Y7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDbEIsT0FBTyxRQUFRLEdBQUMsMkJBQTJCLENBQUE7U0FDNUM7SUFHSCxDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVM7UUFDYixJQUFJO1lBQ0YsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFFLENBQUMsRUFBRyxDQUFDLEVBQUUsRUFBQztnQkFDeEIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxNQUFNLGVBQUssQ0FBQyxHQUFHLENBQUMscUNBQXFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7Z0JBQzlFLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBQyxTQUFTLEVBQUMsRUFBRTtvQkFDdkMsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFBO29CQUN4QixPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUE7b0JBQ3ZCLE1BQU0sTUFBTSxHQUFHLE1BQU0sbUJBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7Z0JBRWxELENBQUMsQ0FBQyxDQUFDO2FBQ0o7WUFDRCxPQUFPLElBQUksQ0FBQTtTQUNaO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLEtBQUssQ0FBQTtTQUNiO0lBRUgsQ0FBQztDQUdGO0FBakVELG1DQWlFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDaGFyYWN0ZXJTZXJ2aWNlcyBmcm9tIFwiQGlvYzpNeVByb2plY3QvQ2hhcmFjdGVyU2VydmljZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiQXBwL01vZGVscy9DaGFyYWN0ZXJcIjtcbmltcG9ydCBDaGFyYWN0ZXJJbnRlcmZhY2UgZnJvbSBcIkNvbnRyYWN0cy9pbnRlcmZhY2VzL0NoYXJhY3Rlci5JbnRlcmZhY2VcIjtcbmltcG9ydCBCYXNlU2VydmljZSBmcm9tIFwiLi9CYXNlU2VydmljZVwiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IERhdGFiYXNlIGZyb20gXCJAaW9jOkFkb25pcy9MdWNpZC9EYXRhYmFzZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFyYWN0ZXJTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2UgaW1wbGVtZW50cyBDaGFyYWN0ZXJJbnRlcmZhY2V7XG4gIHByb3RlY3RlZCBxdWVyeVxuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKENoYXJhY3RlcilcblxuICB9XG5cbiAgYXN5bmMgZmV0Y2hDaGFyYWN0ZXJzKHNvcnRUeXBlLG9yZGVyLGZpbHRlcikge1xuXG4gICAgLy9jb25zb2xlLmxvZyhmaWx0ZXIpXG4gICAgLy9jb25zb2xlLmxvZyhzb3J0VHlwZSlcbiAgICB0cnkge1xuICAgICAgKGF3YWl0IENoYXJhY3Rlci5xdWVyeSgpKVxuICAgICAgaWYoKGZpbHRlciAhPSB1bmRlZmluZWQpJiYoc29ydFR5cGUgIT0gdW5kZWZpbmVkKSl7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5tb2RlbC5xdWVyeSgpLndoZXJlKCdnZW5kZXInLGZpbHRlcikub3JkZXJCeShzb3J0VHlwZSxvcmRlcilcblxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICB9XG4gICAgICBlbHNlIGlmKChzb3J0VHlwZSAhPSB1bmRlZmluZWQpJiYoZmlsdGVyID09IHVuZGVmaW5lZCkpe1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLm1vZGVsLnF1ZXJ5KCkub3JkZXJCeShzb3J0VHlwZSxvcmRlcilcblxuICAgICAgICByZXR1cm4gcmVzdWx0XG5cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYoKHNvcnRUeXBlID09IHVuZGVmaW5lZCkmJihmaWx0ZXIgIT0gdW5kZWZpbmVkKSl7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMubW9kZWwucXVlcnkoKS53aGVyZSgnZ2VuZGVyJyxmaWx0ZXIpXG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuXG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLm1vZGVsLnF1ZXJ5KClcblxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICB9XG5cblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgICAgIHJldHVybiBzb3J0VHlwZSsnIGlzIG5vdCBhIHZhbGlkIHNvcnQgVHlwZSdcbiAgICB9XG5cblxuICB9XG5cbiAgYXN5bmMgZmV0Y2hkYXRhKCl7XG4gICAgdHJ5IHtcbiAgICAgIGZvcih2YXIgaSA9IDE7IGk8PTkgOyBpKyspe1xuICAgICAgICBjb25zdCByZXN1bHQgPSAoYXdhaXQgYXhpb3MuZ2V0KCdodHRwczovL3N3YXBpLmRldi9hcGkvcGVvcGxlLz9wYWdlPScraSkpLmRhdGFcbiAgICAgICAgcmVzdWx0LnJlc3VsdHMuZm9yRWFjaChhc3luYyBjaGFyYWN0ZXIgPT4ge1xuICAgICAgICAgIGRlbGV0ZSBjaGFyYWN0ZXIuY3JlYXRlZFxuICAgICAgICAgIGRlbGV0ZSBjaGFyYWN0ZXIuZWRpdGVkXG4gICAgICAgICAgY29uc3QgcGVvcGxlID0gYXdhaXQgQ2hhcmFjdGVyLmNyZWF0ZShjaGFyYWN0ZXIpXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhwZW9wbGUpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gIH1cblxuXG59XG4iXX0=