"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Character_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Character"));
const BaseService_1 = __importDefault(require("./BaseService"));
const axios_1 = __importDefault(require("axios"));
class CharacterService extends BaseService_1.default {
    constructor() {
        super(Character_1.default);
    }
    async fetchCharacters(sortType, order, filter) {
        try {
            (await Character_1.default.query());
            if ((filter != undefined) && (sortType != undefined)) {
                const result = await this.model.query().where('gender', filter).orderBy(sortType, order);
                return result;
            }
            else if ((sortType != undefined) && (filter == undefined)) {
                const result = this.model.query().orderBy(sortType, order);
                return result;
            }
            else if ((sortType == undefined) && (filter != undefined)) {
                const result = this.model.query().where('gender', filter);
                return result;
            }
            else {
                const result = this.model.query();
                return result;
            }
        }
        catch (error) {
            console.log(error);
            return sortType + ' is not a valid sort Type';
        }
    }
    async fetchdata() {
        try {
            for (var i = 1; i <= 9; i++) {
                const result = (await axios_1.default.get('https://swapi.dev/api/people/?page=' + i)).data;
                result.results.forEach(async (character) => {
                    delete character.created;
                    delete character.edited;
                    await Character_1.default.create(character);
                });
            }
            return true;
        }
        catch (error) {
            return false;
        }
    }
}
exports.default = CharacterService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhcmFjdGVyU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNoYXJhY3RlclNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSwyRkFBNkM7QUFFN0MsZ0VBQXdDO0FBQ3hDLGtEQUEwQjtBQUcxQixNQUFxQixnQkFBaUIsU0FBUSxxQkFBVztJQUV2RDtRQUNFLEtBQUssQ0FBQyxtQkFBUyxDQUFDLENBQUE7SUFFbEIsQ0FBQztJQUVELEtBQUssQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFDLEtBQUssRUFBQyxNQUFNO1FBSXpDLElBQUk7WUFDRixDQUFDLE1BQU0sbUJBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO1lBQ3pCLElBQUcsQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDLElBQUUsQ0FBQyxRQUFRLElBQUksU0FBUyxDQUFDLEVBQUM7Z0JBRWhELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUMsS0FBSyxDQUFDLENBQUE7Z0JBRXRGLE9BQU8sTUFBTSxDQUFBO2FBQ2Q7aUJBQ0ksSUFBRyxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUMsSUFBRSxDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUMsRUFBQztnQkFDckQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFDLEtBQUssQ0FBQyxDQUFBO2dCQUV6RCxPQUFPLE1BQU0sQ0FBQTthQUVkO2lCQUNJLElBQUcsQ0FBQyxRQUFRLElBQUksU0FBUyxDQUFDLElBQUUsQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDLEVBQUM7Z0JBQ3JELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBQyxNQUFNLENBQUMsQ0FBQTtnQkFFeEQsT0FBTyxNQUFNLENBQUE7YUFFZDtpQkFDRztnQkFDRixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFBO2dCQUVqQyxPQUFPLE1BQU0sQ0FBQTthQUNkO1NBR0Y7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDbEIsT0FBTyxRQUFRLEdBQUMsMkJBQTJCLENBQUE7U0FDNUM7SUFHSCxDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVM7UUFDYixJQUFJO1lBQ0YsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFFLENBQUMsRUFBRyxDQUFDLEVBQUUsRUFBQztnQkFDeEIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxNQUFNLGVBQUssQ0FBQyxHQUFHLENBQUMscUNBQXFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7Z0JBQzlFLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBQyxTQUFTLEVBQUMsRUFBRTtvQkFDdkMsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFBO29CQUN4QixPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUE7b0JBQ3ZCLE1BQU0sbUJBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7Z0JBRW5DLENBQUMsQ0FBQyxDQUFDO2FBQ0o7WUFDRCxPQUFPLElBQUksQ0FBQTtTQUNaO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLEtBQUssQ0FBQTtTQUNiO0lBRUgsQ0FBQztDQUdGO0FBakVELG1DQWlFQyIsInNvdXJjZXNDb250ZW50IjpbIi8vaW1wb3J0IENoYXJhY3RlclNlcnZpY2VzIGZyb20gXCJAaW9jOk15UHJvamVjdC9DaGFyYWN0ZXJTZXJ2aWNlXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCJBcHAvTW9kZWxzL0NoYXJhY3RlclwiO1xuaW1wb3J0IENoYXJhY3RlckludGVyZmFjZSBmcm9tIFwiQ29udHJhY3RzL2ludGVyZmFjZXMvQ2hhcmFjdGVyLkludGVyZmFjZVwiO1xuaW1wb3J0IEJhc2VTZXJ2aWNlIGZyb20gXCIuL0Jhc2VTZXJ2aWNlXCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG4vL2ltcG9ydCBEYXRhYmFzZSBmcm9tIFwiQGlvYzpBZG9uaXMvTHVjaWQvRGF0YWJhc2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhcmFjdGVyU2VydmljZSBleHRlbmRzIEJhc2VTZXJ2aWNlIGltcGxlbWVudHMgQ2hhcmFjdGVySW50ZXJmYWNle1xuICBwcm90ZWN0ZWQgcXVlcnlcbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcihDaGFyYWN0ZXIpXG5cbiAgfVxuXG4gIGFzeW5jIGZldGNoQ2hhcmFjdGVycyhzb3J0VHlwZSxvcmRlcixmaWx0ZXIpIHtcblxuICAgIC8vY29uc29sZS5sb2coZmlsdGVyKVxuICAgIC8vY29uc29sZS5sb2coc29ydFR5cGUpXG4gICAgdHJ5IHtcbiAgICAgIChhd2FpdCBDaGFyYWN0ZXIucXVlcnkoKSlcbiAgICAgIGlmKChmaWx0ZXIgIT0gdW5kZWZpbmVkKSYmKHNvcnRUeXBlICE9IHVuZGVmaW5lZCkpe1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubW9kZWwucXVlcnkoKS53aGVyZSgnZ2VuZGVyJyxmaWx0ZXIpLm9yZGVyQnkoc29ydFR5cGUsb3JkZXIpXG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgfVxuICAgICAgZWxzZSBpZigoc29ydFR5cGUgIT0gdW5kZWZpbmVkKSYmKGZpbHRlciA9PSB1bmRlZmluZWQpKXtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5tb2RlbC5xdWVyeSgpLm9yZGVyQnkoc29ydFR5cGUsb3JkZXIpXG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuXG4gICAgICB9XG4gICAgICBlbHNlIGlmKChzb3J0VHlwZSA9PSB1bmRlZmluZWQpJiYoZmlsdGVyICE9IHVuZGVmaW5lZCkpe1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLm1vZGVsLnF1ZXJ5KCkud2hlcmUoJ2dlbmRlcicsZmlsdGVyKVxuXG4gICAgICAgIHJldHVybiByZXN1bHRcblxuICAgICAgfVxuICAgICAgZWxzZXtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5tb2RlbC5xdWVyeSgpXG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgfVxuXG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coZXJyb3IpXG4gICAgICByZXR1cm4gc29ydFR5cGUrJyBpcyBub3QgYSB2YWxpZCBzb3J0IFR5cGUnXG4gICAgfVxuXG5cbiAgfVxuXG4gIGFzeW5jIGZldGNoZGF0YSgpe1xuICAgIHRyeSB7XG4gICAgICBmb3IodmFyIGkgPSAxOyBpPD05IDsgaSsrKXtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKGF3YWl0IGF4aW9zLmdldCgnaHR0cHM6Ly9zd2FwaS5kZXYvYXBpL3Blb3BsZS8/cGFnZT0nK2kpKS5kYXRhXG4gICAgICAgIHJlc3VsdC5yZXN1bHRzLmZvckVhY2goYXN5bmMgY2hhcmFjdGVyID0+IHtcbiAgICAgICAgICBkZWxldGUgY2hhcmFjdGVyLmNyZWF0ZWRcbiAgICAgICAgICBkZWxldGUgY2hhcmFjdGVyLmVkaXRlZFxuICAgICAgICAgIGF3YWl0IENoYXJhY3Rlci5jcmVhdGUoY2hhcmFjdGVyKVxuICAgICAgICAgIC8vY29uc29sZS5sb2cocGVvcGxlKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICB9XG5cblxufVxuIl19